{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Plugin : <code>run-shell-cmd</code>","text":"<p>This is an MkDocs plugin that runs a specified command (or commands) during the <code>build</code>, <code>serve</code> and publish process and injects the command and output into the generated site in a fenced block.</p> <p>It's very useful for documenting command-line programs, expecially during development where the command line may change frequently.</p> <p>See the examples page for several examples of the plugin in action.</p> <p>IMPORTANT</p> <p>This plugin allows running arbitrary commands on your system. It does NOT check the command for safety, and it does NOT run the command in a sandbox. However, it does ask you if you want to run each command, and it does allow you to disable all commands from running again for the duration of the session.</p> <p>Also commands are not run using a shell, so your environment variables are not available to the command.</p> <p>Commands are set in the markdown file, so they are not run unless you build, serve or publish the site.</p> <p>If you are using a CI/CD pipeline to generate your docs, you should be aware that some standard commands may be missing or blocked, and the CI will probably hang due to waiting for input. Generating the docs on a local machine and then pushing them up to your hosting is probably a better idea.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install the package with pip:</p> <pre><code>pip install mkdocs-run-shell-cmd-plugin\n</code></pre> <p>or, if you are using Poetry:</p> <pre><code>poetry add mkdocs-run-shell-cmd-plugin --group dev\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Activate the plugin in your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- run-shell-cmd\n</code></pre> <p>Note</p> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if  here is no <code>plugins</code> entry set.</p> <p>To activate the console highlighting you will need to add the following to the <code>markdown_extensions</code> section of your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences\n- pymdownx.highlight\n</code></pre> <p>You will also need the <code>pymdown-extensions</code> and <code>pygments</code> packages installed in your environment, unless you dont want the basic console syntax highlighting similar to GitHub markdown.</p> <p>Then, in your template, you can use the <code>{{ run-shell-cmd(cmd=\"my-command\") }}</code> command:</p> <pre>\n  # My Project\n\n  Below is the output of `my-program --help`:\n\n  {{ run-shell-cmd(cmd='my-program --help') }}\n</pre> <p>The spaces around the tag are optional and it is case insensitive, also you can use either double or single quotes around the command string.</p> <p>All the below strings have identical output:</p> <p><code>{{ run-shell-cmd(cmd='my-program --help') }}</code></p> <p><code>{{ run-shell-cmd(cmd=\"my-program --help\") }}</code></p> <p><code>{{RUN-SHELL-CMD(cmd='my-program --help')}}</code></p> <p><code>{{run-shell-cmd(cmd=\"my-program --help\")}}</code></p> <p><code>{{ run-SHELL-cmd(cmd=\"my-program --help\")}}</code></p> <p>When the site is built, the progress will stop for each command discovered, and the user will be asked if it should be run or not :</p> <pre><code>INFO     -  You are using the 'run-shell-cmd' Plugin.\n            This will RUN SHELL COMMANDS that are specified in the markdown files!\n            You will be asked to CONFIRM each command, or you can specify (a)lways or (d)isable.\n            Visit https://seapagan.github.io/mkdocs-run-shell-cmd-plugin for more info.\nINFO     -  Building documentation...\nINFO     -  Cleaning site directory\n[Run Shell Command] - Run \"cowsay This works!!!\"? [y/n/a/d/yes/no/always/disable] (yes):\n[Run Shell Command] - Run \"lsb_release -a\"? [y/n/a/d/yes/no/always/disable] (yes): a\nINFO     -  Documentation built in 6.78 seconds\nINFO     -  [09:56:25] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO     -  [09:56:25] Serving on http://127.0.0.1:8000/\n</code></pre> <p>You can choose Yes, No, Always, or Disable. If you choose Always, you will never be asked again FOR THIS SESSION and all further commands will be run. If you choose Disable, you will never be asked again FOR THIS SESSION and NO further commands will be run.</p> <p>Note</p> <p>Be aware, if you do not choose Always or Disable, you will be asked again for each command whenever you change a file and the site is rebuilt under <code>mkdocs serve</code>, even if the page with the command has not changed.</p> <p>To fix this you can either choose one of the options above or you can use the <code>--dirtyreload</code> option to <code>mkdocs serve</code> to disable the rebuild on file change. The latter will only re-create markdown files that have actually changed, but note the warning that this may cause navigation issues, but this is never usually an issue while serving the site locally.</p> <p>IMPORTANT</p> <p>There will NEVER be an option to run all commands by default without user oversight, as this would be a massive security risk.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>At this time there are no configuration options. I intend to add at least the following options:</p> <ul> <li>disable wrapping in a fence</li> <li>choose a specific title for the output, it will be the same for all.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This is released under the MIT License. See the bundled LICENSE file for more details.</p>"},{"location":"examples/","title":"Examples","text":"<p>Below are some examples of the plugin in action. First is the required tag to use in the Markdown file, then the output of the command.</p> <p>Run the 'cowsay' command!</p> <p><code>{{ run-shell-cmd(cmd=\"cowsay This works!!!\") }}</code></p> <pre><code>$ cowsay This works!!!\n  _____________\n| This works!!! |\n  =============\n             \\\n              \\\n                ^__^\n                (oo)\\_______\n                (__)\\       )\\/\\\n                    ||----w |\n                    ||     ||\n</code></pre> <p>Show the build OS information:</p> <p><code>{{ run-shell-cmd(cmd='lsb_release -a') }}</code></p> <pre><code>$ lsb_release -a\nDistributor ID: Ubuntu\nDescription:    Ubuntu 22.04.2 LTS\nRelease:    22.04\nCodename:   jammy\n</code></pre> <p>Ping <code>google.com</code> 3 times and show the output.:</p> <p><code>{{ run-shell-cmd(cmd='ping -c 3 google.com') }}</code></p> <pre><code>$ ping -c 3 google.com\nPING google.com (142.250.187.238) 56(84) bytes of data.\n64 bytes from lhr25s34-in-f14.1e100.net (142.250.187.238): icmp_seq=1 ttl=115 time=29.6 ms\n64 bytes from lhr25s34-in-f14.1e100.net (142.250.187.238): icmp_seq=2 ttl=115 time=31.1 ms\n64 bytes from lhr25s34-in-f14.1e100.net (142.250.187.238): icmp_seq=3 ttl=115 time=50.6 ms\n\n--- google.com ping statistics ---\n3 packets transmitted, 3 received, 0% packet loss, time 2003ms\nrtt min/avg/max/mdev = 29.592/37.084/50.609/9.581 ms\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"todo/","title":"TODO List","text":"<ul> <li> Add configuration options</li> <li> Add tests</li> <li> Find a way to run on CI/CD without prompting the user, but in a safe way   that doesn't allow arbitrary commands to be run. We can always check the <code>CI</code>   environment variable, but it's still not good practice to run arbitrary code.</li> <li> Configure option to enable/disable only changing the first instance of a   command in a document. Currently identical commands in the same document will   be run each time instead of replacing the output of all with the first. This   is a design decision, but it may be useful to have the option to change it.</li> <li> Use Rich to emphasize the console   output with color etc.</li> </ul>"}]}